/**
 * kms
 * unknown
 *
 * OpenAPI spec version: last
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise, ExtraFetchParams } from '@ajax';
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

/**
  * 算法表
  */
export type ParamsBodyalgorithmAddPost = models.Algorithm2;
/**
  * @description algorithmDeleteBatchDelete参数
  * @property `ids` ids
  */
export interface ParamsalgorithmDeleteBatchDelete {
  // queryParams
  /**
   * ids
   */
  ids: string;
}
/**
  * raw paramter
  */
export type ParamsBodyalgorithmDeleteBatchDelete = string;
/**
  * @description algorithmDeleteDelete参数
  * @property `id` id
  */
export interface ParamsalgorithmDeleteDelete {
  // queryParams
  /**
   * id
   */
  id: string;
}
/**
  * raw paramter
  */
export type ParamsBodyalgorithmDeleteDelete = string;
/**
  * 算法表
  */
export type ParamsBodyalgorithmEditPost = models.Algorithm3;
/**
  * @description algorithmListPost参数
  * @property `[pageNum]` pageNum
  * @property `[pageSize]` pageSize
  */
export interface ParamsalgorithmListPost {
  // queryParams
  /**
   * pageNum
   */
  pageNum?: string;
  /**
   * pageSize
   */
  pageSize?: string;
}
/**
  * 算法表
  */
export type ParamsBodyalgorithmListPost = models.Algorithm;
/**
  * @description algorithmQueryAuditLogByIdGet参数
  * @property `algoId` algoId
  * @property `[pageNum]` pageNum
  * @property `[pageSize]` pageSize
  */
export interface ParamsalgorithmQueryAuditLogByIdGet {
  // queryParams
  /**
   * algoId
   */
  algoId: string;
  /**
   * pageNum
   */
  pageNum?: string;
  /**
   * pageSize
   */
  pageSize?: string;
}
/**
  * @description algorithmQueryByIdGet参数
  * @property `id` id
  */
export interface ParamsalgorithmQueryByIdGet {
  // queryParams
  /**
   * id
   */
  id: string;
}
/**
  * @description algorithmQueryVersionByIdGet参数
  * @property `algoId` algoId
  * @property `[pageNum]` pageNum
  * @property `[pageSize]` pageSize
  */
export interface ParamsalgorithmQueryVersionByIdGet {
  // queryParams
  /**
   * algoId
   */
  algoId: string;
  /**
   * pageNum
   */
  pageNum?: string;
  /**
   * pageSize
   */
  pageSize?: string;
}
/**
  * @description commonTaskAuditPageListTaskIdPageNumPageSizePost参数
  * @property `pageNum` pageNum
  * @property `pageSize` pageSize
  * @property `taskId` taskId
  */
export interface ParamscommonTaskAuditPageListTaskIdPageNumPageSizePost {
  // pathParams
  /**
   * pageNum
   */
  pageNum: string;
  /**
   * pageSize
   */
  pageSize: string;
  /**
   * taskId
   */
  taskId: string;
}
/**
  */
export type ParamsBodycommonTaskAuditPageListTaskIdPageNumPageSizePost = 5;
/**
  * @description commonTaskFlowTaskIdPut参数
  * @property `taskId` taskId
  */
export interface ParamscommonTaskFlowTaskIdPut {
  // pathParams
  /**
   * taskId
   */
  taskId: string;
}
/**
  * 公共任务
  */
export type ParamsBodycommonTaskFlowTaskIdPut = models.CommonTask0;
/**
  * @description commonTaskHistoryPageListTaskIdPageNumPageSizePost参数
  * @property `pageNum` pageNum
  * @property `pageSize` pageSize
  * @property `taskId` taskId
  */
export interface ParamscommonTaskHistoryPageListTaskIdPageNumPageSizePost {
  // pathParams
  /**
   * pageNum
   */
  pageNum: string;
  /**
   * pageSize
   */
  pageSize: string;
  /**
   * taskId
   */
  taskId: string;
}
/**
  */
export type ParamsBodycommonTaskHistoryPageListTaskIdPageNumPageSizePost = 3;
/**
  * @description commonTaskPageListPageNumPageSizePost参数
  * @property `pageNum` pageNum
  * @property `pageSize` pageSize
  */
export interface ParamscommonTaskPageListPageNumPageSizePost {
  // pathParams
  /**
   * pageNum
   */
  pageNum: string;
  /**
   * pageSize
   */
  pageSize: string;
}
/**
  * 公共任务表
  */
export type ParamsBodycommonTaskPageListPageNumPageSizePost = models.CommonTask1;
/**
  * 公共任务
  */
export type ParamsBodycommonTaskPost = models.CommonTask01;
/**
  */
export type ParamsBodycommonTaskPut = 4;
/**
  * @description commonTaskTaskIdDelete参数
  * @property `taskId` taskId
  */
export interface ParamscommonTaskTaskIdDelete {
  // pathParams
  /**
   * taskId
   */
  taskId: string;
}
/**
  * raw paramter
  */
export type ParamsBodycommonTaskTaskIdDelete = string;
/**
  * @description commonTaskTaskIdGet参数
  * @property `taskId` taskId
  */
export interface ParamscommonTaskTaskIdGet {
  // pathParams
  /**
   * taskId
   */
  taskId: string;
}
/**
  * @description dataQueryQuerySatBySidGet参数
  * @property `[satSid]` 卫星标识
  */
export interface ParamsdataQueryQuerySatBySidGet {
  // queryParams
  /**
   * 卫星标识
   */
  satSid?: string;
}
/**
  * @description dataQueryQueryTmBySidGet参数
  * @property `[satSid]` 卫星标识
  */
export interface ParamsdataQueryQueryTmBySidGet {
  // queryParams
  /**
   * 卫星标识
   */
  satSid?: string;
}
/**
  * 知识
  */
export type ParamsBodykmsZsbjServerApiKnowledgeAddPost = models.Knowledge;
/**
  * @description kmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost参数
  * @property `pageNum` pageNum
  * @property `pageSize` pageSize
  */
export interface ParamskmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost {
  // pathParams
  /**
   * pageNum
   */
  pageNum: string;
  /**
   * pageSize
   */
  pageSize: string;
}
/**
  */
export type ParamsBodykmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost = models.BaseQo;
/**
  * 知识批量编辑
  */
export type ParamsBodykmsZsbjServerApiKnowledgeBatchEditPut = models.KnowledgeBatchEditDto;
/**
  */
export type ParamsBodykmsZsbjServerApiKnowledgeCheckBatchPost = models.KmsZsbjServerApiKnowledgeCheckBatchBody;
/**
  */
export type ParamsBodykmsZsbjServerApiKnowledgeCheckPost = models.CheckQo;
/**
  */
export type ParamsBodykmsZsbjServerApiKnowledgeConvertMultiPost = models.KmsZsbjServerApiKnowledgeConvertMultiBody;
/**
  */
export type ParamsBodykmsZsbjServerApiKnowledgeConvertPost = models.KmsZsbjServerApiKnowledgeConvertBody;
/**
  */
export type ParamsBodykmsZsbjServerApiKnowledgeDeleteDelete = models.KmsZsbjServerApiKnowledgeDeleteBody;
/**
  * @description kmsZsbjServerApiKnowledgeDownloadGet参数
  * @property `uuid` 待下载的知识标识uuid
  * @property `version` 待下载的知识版本号
  */
export interface ParamskmsZsbjServerApiKnowledgeDownloadGet {
  // queryParams
  /**
   * 待下载的知识标识uuid
   */
  uuid: string;
  /**
   * 待下载的知识版本号
   */
  version: string;
}
/**
  */
export type ParamsBodykmsZsbjServerApiKnowledgeDownloadMultiPost = models.KmsZsbjServerApiKnowledgeDownloadMultiBody;
/**
  * @description kmsZsbjServerApiKnowledgeExistsGet参数
  * @property `ruleName` 知识名称
  */
export interface ParamskmsZsbjServerApiKnowledgeExistsGet {
  // queryParams
  /**
   * 知识名称
   */
  ruleName: string;
}
/**
  */
export type ParamsBodykmsZsbjServerApiKnowledgeExportPost = models.ExportQo;
/**
  * @description kmsZsbjServerApiKnowledgeHistoryGet参数
  * @property `uuid` 知识标识uuid
  */
export interface ParamskmsZsbjServerApiKnowledgeHistoryGet {
  // queryParams
  /**
   * 知识标识uuid
   */
  uuid: string;
}
/**
  * @description kmsZsbjServerApiKnowledgeImportPost参数
  * @property `targetCode` 导入对象代号
  * @property `[file]` 
  */
export interface ParamskmsZsbjServerApiKnowledgeImportPost {
  // queryParams
  /**
   * 导入对象代号
   */
  targetCode: string;
  // formParams
  file?: any;
}
/**
  */
export type ParamsBodykmsZsbjServerApiKnowledgeLoadingAllPost = models.KmsZsbjServerApiKnowledgeLoadingAllBody;
/**
  * @description kmsZsbjServerApiKnowledgeLoadingPost参数
  * @property `uuid` 待加载的知识标识uuid
  * @property `version` 待加载的知识版本号
  */
export interface ParamskmsZsbjServerApiKnowledgeLoadingPost {
  // queryParams
  /**
   * 待加载的知识标识uuid
   */
  uuid: string;
  /**
   * 待加载的知识版本号
   */
  version: string;
}
/**
  * @description kmsZsbjServerApiKnowledgePagePageNumPageSizePost参数
  * @property `pageNum` pageNum
  * @property `pageSize` pageSize
  */
export interface ParamskmsZsbjServerApiKnowledgePagePageNumPageSizePost {
  // pathParams
  /**
   * pageNum
   */
  pageNum: string;
  /**
   * pageSize
   */
  pageSize: string;
}
/**
  * 知识信息表
  */
export type ParamsBodykmsZsbjServerApiKnowledgePagePageNumPageSizePost = models.KnowledgeInfo;
/**
  * 知识
  */
export type ParamsBodykmsZsbjServerApiKnowledgeUpdatePut = models.Knowledge1;
/**
  * @description kmsZsbjServerApiKnowledgeViewGet参数
  * @property `uuid` 待查看的知识标识uuid
  * @property `version` 待查看的知识版本号
  */
export interface ParamskmsZsbjServerApiKnowledgeViewGet {
  // queryParams
  /**
   * 待查看的知识标识uuid
   */
  uuid: string;
  /**
   * 待查看的知识版本号
   */
  version: string;
}
/**
  * @description objectCommonTaskAssessObjectIdGet参数
  * @property `objectId` objectId
  */
export interface ParamsobjectCommonTaskAssessObjectIdGet {
  // pathParams
  /**
   * objectId
   */
  objectId: string;
}
/**
  * @description objectCommonTaskDagObjectIdTaskIdGet参数
  * @property `objectId` objectId
  * @property `taskId` taskId
  */
export interface ParamsobjectCommonTaskDagObjectIdTaskIdGet {
  // pathParams
  /**
   * objectId
   */
  objectId: string;
  /**
   * taskId
   */
  taskId: string;
}
/**
  * @description objectCommonTaskObjectIdGet参数
  * @property `objectId` objectId
  */
export interface ParamsobjectCommonTaskObjectIdGet {
  // pathParams
  /**
   * objectId
   */
  objectId: string;
}
/**
  * @description objectCommonTaskObjectIdPut参数
  * @property `objectId` objectId
  */
export interface ParamsobjectCommonTaskObjectIdPut {
  // pathParams
  /**
   * objectId
   */
  objectId: string;
}
/**
  */
export type ParamsBodyobjectCommonTaskObjectIdPut = Array<models.ObjectCommonTask>;

export class DefaultApi {
  protected $basePath = '/kms-job-server'.replace(/\/$/, '');

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath.replace(/\/$/, '');
    }
  }

  /**
   * 
   * @summary 算法任务-新增
   
   * @param data: ParamsBodyalgorithmAddPost// 算法表
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public algorithmAddPost = (
    
    data: ParamsBodyalgorithmAddPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/algorithm/add`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 算法任务-批量删除
   * @param params ParamsalgorithmDeleteBatchDelete
   * @param data: ParamsBodyalgorithmDeleteBatchDelete// raw paramter
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public algorithmDeleteBatchDelete = (
    params: ParamsalgorithmDeleteBatchDelete,
    data: ParamsBodyalgorithmDeleteBatchDelete,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/algorithm/deleteBatch`;
    const p: any = {};
    p.query = {};
    if ('ids' in params) p.query.ids = params.ids;
    ajax.check(params.ids, 'ids');
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'DELETE',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 算法任务-通过id删除
   * @param params ParamsalgorithmDeleteDelete
   * @param data: ParamsBodyalgorithmDeleteDelete// raw paramter
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public algorithmDeleteDelete = (
    params: ParamsalgorithmDeleteDelete,
    data: ParamsBodyalgorithmDeleteDelete,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/algorithm/delete`;
    const p: any = {};
    p.query = {};
    if ('id' in params) p.query.id = params.id;
    ajax.check(params.id, 'id');
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'DELETE',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 算法任务-编辑
   
   * @param data: ParamsBodyalgorithmEditPost// 算法表
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public algorithmEditPost = (
    
    data: ParamsBodyalgorithmEditPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/algorithm/edit`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 算法任务-导出
   
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public algorithmExportPost = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/algorithm/export`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 算法任务-导入
   
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public algorithmImportPost = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/algorithm/import`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 算法任务-列表
   * @param params ParamsalgorithmListPost
   * @param data: ParamsBodyalgorithmListPost// 算法表
   * @param opt ajax config
   * @returns models.BaseResponseIPageAlgorithm
   */
  public algorithmListPost = (
    params: ParamsalgorithmListPost,
    data: ParamsBodyalgorithmListPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseIPageAlgorithm>  => {
    const url = this.$basePath + `/algorithm/list`;
    const p: any = {};
    p.query = {};
    if ('pageNum' in params) p.query.pageNum = params.pageNum;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 算法任务-通过算法id查询审计日志
   * @param params ParamsalgorithmQueryAuditLogByIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public algorithmQueryAuditLogByIdGet = (
    params: ParamsalgorithmQueryAuditLogByIdGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/algorithm/queryAuditLogById`;
    const p: any = {};
    p.query = {};
    if ('algoId' in params) p.query.algoId = params.algoId;
    ajax.check(params.algoId, 'algoId');
    if ('pageNum' in params) p.query.pageNum = params.pageNum;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 算法任务-通过id查询
   * @param params ParamsalgorithmQueryByIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public algorithmQueryByIdGet = (
    params: ParamsalgorithmQueryByIdGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/algorithm/queryById`;
    const p: any = {};
    p.query = {};
    if ('id' in params) p.query.id = params.id;
    ajax.check(params.id, 'id');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 算法任务-通过算法id查询历史
   * @param params ParamsalgorithmQueryVersionByIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public algorithmQueryVersionByIdGet = (
    params: ParamsalgorithmQueryVersionByIdGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/algorithm/queryVersionById`;
    const p: any = {};
    p.query = {};
    if ('algoId' in params) p.query.algoId = params.algoId;
    ajax.check(params.algoId, 'algoId');
    if ('pageNum' in params) p.query.pageNum = params.pageNum;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 操作日志
   * @param params ParamscommonTaskAuditPageListTaskIdPageNumPageSizePost
   * @param data: ParamsBodycommonTaskAuditPageListTaskIdPageNumPageSizePost
   * @param opt ajax config
   * @returns models.BaseResponseIPageCommonTaskAuditLog
   */
  public commonTaskAuditPageListTaskIdPageNumPageSizePost = (
    params: ParamscommonTaskAuditPageListTaskIdPageNumPageSizePost,
    data: ParamsBodycommonTaskAuditPageListTaskIdPageNumPageSizePost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseIPageCommonTaskAuditLog>  => {
    const {
    pageNum,
    pageSize,
    taskId,
} = params;
    const url = this.$basePath + `/commonTask/audit/pageList/${taskId}/${pageNum}/${pageSize}`;
    const p: any = {};
    ajax.check(params.pageNum, 'pageNum');
    ajax.check(params.pageSize, 'pageSize');
    ajax.check(params.taskId, 'taskId');
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 任务流程编辑
   * @param params ParamscommonTaskFlowTaskIdPut
   * @param data: ParamsBodycommonTaskFlowTaskIdPut// 公共任务
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public commonTaskFlowTaskIdPut = (
    params: ParamscommonTaskFlowTaskIdPut,
    data: ParamsBodycommonTaskFlowTaskIdPut,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const {
    taskId,
} = params;
    const url = this.$basePath + `/commonTask/flow/${taskId}`;
    const p: any = {};
    ajax.check(params.taskId, 'taskId');
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 历史
   * @param params ParamscommonTaskHistoryPageListTaskIdPageNumPageSizePost
   * @param data: ParamsBodycommonTaskHistoryPageListTaskIdPageNumPageSizePost
   * @param opt ajax config
   * @returns models.BaseResponseIPageCommonTaskVersion
   */
  public commonTaskHistoryPageListTaskIdPageNumPageSizePost = (
    params: ParamscommonTaskHistoryPageListTaskIdPageNumPageSizePost,
    data: ParamsBodycommonTaskHistoryPageListTaskIdPageNumPageSizePost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseIPageCommonTaskVersion>  => {
    const {
    pageNum,
    pageSize,
    taskId,
} = params;
    const url = this.$basePath + `/commonTask/history/pageList/${taskId}/${pageNum}/${pageSize}`;
    const p: any = {};
    ajax.check(params.pageNum, 'pageNum');
    ajax.check(params.pageSize, 'pageSize');
    ajax.check(params.taskId, 'taskId');
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 列表查询
   * @param params ParamscommonTaskPageListPageNumPageSizePost
   * @param data: ParamsBodycommonTaskPageListPageNumPageSizePost// 公共任务表
   * @param opt ajax config
   * @returns models.BaseResponseIPageCommonTask
   */
  public commonTaskPageListPageNumPageSizePost = (
    params: ParamscommonTaskPageListPageNumPageSizePost,
    data: ParamsBodycommonTaskPageListPageNumPageSizePost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseIPageCommonTask>  => {
    const {
    pageNum,
    pageSize,
} = params;
    const url = this.$basePath + `/commonTask/pageList/${pageNum}/${pageSize}`;
    const p: any = {};
    ajax.check(params.pageNum, 'pageNum');
    ajax.check(params.pageSize, 'pageSize');
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 新建
   
   * @param data: ParamsBodycommonTaskPost// 公共任务
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public commonTaskPost = (
    
    data: ParamsBodycommonTaskPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/commonTask`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 批量编辑
   
   * @param data: ParamsBodycommonTaskPut
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public commonTaskPut = (
    
    data: ParamsBodycommonTaskPut,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/commonTask`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 删除
   * @param params ParamscommonTaskTaskIdDelete
   * @param data: ParamsBodycommonTaskTaskIdDelete// raw paramter
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public commonTaskTaskIdDelete = (
    params: ParamscommonTaskTaskIdDelete,
    data: ParamsBodycommonTaskTaskIdDelete,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const {
    taskId,
} = params;
    const url = this.$basePath + `/commonTask/${taskId}`;
    const p: any = {};
    ajax.check(params.taskId, 'taskId');
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'DELETE',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 查看
   * @param params ParamscommonTaskTaskIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponseCommonTask
   */
  public commonTaskTaskIdGet = (
    params: ParamscommonTaskTaskIdGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseCommonTask>  => {
    const {
    taskId,
} = params;
    const url = this.$basePath + `/commonTask/${taskId}`;
    const p: any = {};
    ajax.check(params.taskId, 'taskId');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 告警、对象、任务数统计
   
   
   * @param opt ajax config
   * @returns models.BaseResponse4
   */
  public dashboardIndexCountGet = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse4>  => {
    const url = this.$basePath + `/dashboard/indexCount`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 对象组列表查询
   
   
   * @param opt ajax config
   * @returns models.BaseResponseListObjectGroupBean
   */
  public dataQueryQueryObjectGroupListGet = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseListObjectGroupBean>  => {
    const url = this.$basePath + `/DataQuery/queryObjectGroupList`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 根据卫星标识查询卫星信息
   * @param params ParamsdataQueryQuerySatBySidGet
   
   * @param opt ajax config
   * @returns models.BaseResponseSatBean
   */
  public dataQueryQuerySatBySidGet = (
    params: ParamsdataQueryQuerySatBySidGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseSatBean>  => {
    const url = this.$basePath + `/DataQuery/querySatBySid`;
    const p: any = {};
    p.query = {};
    if ('satSid' in params) p.query.satSid = params.satSid;
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 卫星列表查询
   
   
   * @param opt ajax config
   * @returns models.BaseResponseListSatBean
   */
  public dataQueryQuerySatListGet = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseListSatBean>  => {
    const url = this.$basePath + `/DataQuery/querySatList`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 系统标识列表查询
   
   
   * @param opt ajax config
   * @returns models.BaseResponseListSystemCodeBean
   */
  public dataQueryQuerySystemCodeListGet = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseListSystemCodeBean>  => {
    const url = this.$basePath + `/DataQuery/querySystemCodeList`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 根据卫星标识查询参数信息
   * @param params ParamsdataQueryQueryTmBySidGet
   
   * @param opt ajax config
   * @returns models.BaseResponseListParamBean
   */
  public dataQueryQueryTmBySidGet = (
    params: ParamsdataQueryQueryTmBySidGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseListParamBean>  => {
    const url = this.$basePath + `/DataQuery/queryTmBySid`;
    const p: any = {};
    p.query = {};
    if ('satSid' in params) p.query.satSid = params.satSid;
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 新增一条知识信息
   * @summary 新增知识
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeAddPost// 知识
   * @param opt ajax config
   * @returns models.BaseResponseKnowledgeVersion
   */
  public kmsZsbjServerApiKnowledgeAddPost = (
    
    data: ParamsBodykmsZsbjServerApiKnowledgeAddPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseKnowledgeVersion>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/add`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 获取审计日志列表
   * @param params ParamskmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost
   * @param opt ajax config
   * @returns models.BaseResponseIPageKnowledgeAuditLog
   */
  public kmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost = (
    params: ParamskmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost,
    data: ParamsBodykmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseIPageKnowledgeAuditLog>  => {
    const {
    pageNum,
    pageSize,
} = params;
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/audit/page/${pageNum}/${pageSize}`;
    const p: any = {};
    ajax.check(params.pageNum, 'pageNum');
    ajax.check(params.pageSize, 'pageSize');
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 更新多条知识信息
   * @summary 更新多条知识信息
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeBatchEditPut// 知识批量编辑
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeBatchEditPut = (
    
    data: ParamsBodykmsZsbjServerApiKnowledgeBatchEditPut,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/batch-edit`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 多条知识校验
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeCheckBatchPost
   * @param opt ajax config
   * @returns models.BaseResponse1
   */
  public kmsZsbjServerApiKnowledgeCheckBatchPost = (
    
    data: ParamsBodykmsZsbjServerApiKnowledgeCheckBatchPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse1>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/check-batch`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 知识校验
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeCheckPost
   * @param opt ajax config
   * @returns models.BaseResponse3
   */
  public kmsZsbjServerApiKnowledgeCheckPost = (
    
    data: ParamsBodykmsZsbjServerApiKnowledgeCheckPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse3>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/check`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 多条知识转换
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeConvertMultiPost
   * @param opt ajax config
   * @returns models.BaseResponse2
   */
  public kmsZsbjServerApiKnowledgeConvertMultiPost = (
    
    data: ParamsBodykmsZsbjServerApiKnowledgeConvertMultiPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse2>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/convert-multi`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 单条知识转换
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeConvertPost
   * @param opt ajax config
   * @returns models.BaseResponseKnowledgeContentBo
   */
  public kmsZsbjServerApiKnowledgeConvertPost = (
    
    data: ParamsBodykmsZsbjServerApiKnowledgeConvertPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseKnowledgeContentBo>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/convert`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 删除多条知识记录
   * @summary 删除知识记录
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeDeleteDelete
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeDeleteDelete = (
    
    data: ParamsBodykmsZsbjServerApiKnowledgeDeleteDelete,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/delete`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'DELETE',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 下载知识文件
   * @param params ParamskmsZsbjServerApiKnowledgeDownloadGet
   
   * @param opt ajax config
   * @returns string
   */
  public kmsZsbjServerApiKnowledgeDownloadGet = (
    params: ParamskmsZsbjServerApiKnowledgeDownloadGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<string>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/download`;
    const p: any = {};
    p.query = {};
    if ('uuid' in params) p.query.uuid = params.uuid;
    ajax.check(params.uuid, 'uuid');
    if ('version' in params) p.query.version = params.version;
    ajax.check(params.version, 'version');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 下载多个知识文件
   * @summary 下载多个知识文件
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeDownloadMultiPost
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeDownloadMultiPost = (
    
    data: ParamsBodykmsZsbjServerApiKnowledgeDownloadMultiPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/download-multi`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 根据名称查询知识是否存在
   * @param params ParamskmsZsbjServerApiKnowledgeExistsGet
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeExistsGet = (
    params: ParamskmsZsbjServerApiKnowledgeExistsGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/exists`;
    const p: any = {};
    p.query = {};
    if ('ruleName' in params) p.query.ruleName = params.ruleName;
    ajax.check(params.ruleName, 'ruleName');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 导出知识列表及文件
   * @summary 导出知识列表
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeExportPost
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeExportPost = (
    
    data: ParamsBodykmsZsbjServerApiKnowledgeExportPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/export`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 获取指定知识历史版本列表
   * @param params ParamskmsZsbjServerApiKnowledgeHistoryGet
   
   * @param opt ajax config
   * @returns models.BaseResponseListKnowledgeVersion
   */
  public kmsZsbjServerApiKnowledgeHistoryGet = (
    params: ParamskmsZsbjServerApiKnowledgeHistoryGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseListKnowledgeVersion>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/history`;
    const p: any = {};
    p.query = {};
    if ('uuid' in params) p.query.uuid = params.uuid;
    ajax.check(params.uuid, 'uuid');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 导入知识列表
   * @param params ParamskmsZsbjServerApiKnowledgeImportPost
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeImportPost = (
    params: ParamskmsZsbjServerApiKnowledgeImportPost,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/import`;
    const p: any = {};
    p.query = {};
    if ('targetCode' in params) p.query.targetCode = params.targetCode;
    ajax.check(params.targetCode, 'targetCode');
    p.form = new FormData();
    // 上传文件
    opt = {
      ...opt,
      headers: {
        ...(opt && opt.headers),
        'Content-Type': 'multipart/form-data'
      }
    };
    // p.form = new FormData();
    if ('file' in params) p.form.append('file', params.file);
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 加载所有
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeLoadingAllPost
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeLoadingAllPost = (
    
    data: ParamsBodykmsZsbjServerApiKnowledgeLoadingAllPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/loading-all`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 在线加载
   * @param params ParamskmsZsbjServerApiKnowledgeLoadingPost
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeLoadingPost = (
    params: ParamskmsZsbjServerApiKnowledgeLoadingPost,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/loading`;
    const p: any = {};
    p.query = {};
    if ('uuid' in params) p.query.uuid = params.uuid;
    ajax.check(params.uuid, 'uuid');
    if ('version' in params) p.query.version = params.version;
    ajax.check(params.version, 'version');
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 获取指定页知识列表
   * @param params ParamskmsZsbjServerApiKnowledgePagePageNumPageSizePost
   * @param data: ParamsBodykmsZsbjServerApiKnowledgePagePageNumPageSizePost// 知识信息表
   * @param opt ajax config
   * @returns models.BaseResponseIPageKnowledgeDetailInfo
   */
  public kmsZsbjServerApiKnowledgePagePageNumPageSizePost = (
    params: ParamskmsZsbjServerApiKnowledgePagePageNumPageSizePost,
    data: ParamsBodykmsZsbjServerApiKnowledgePagePageNumPageSizePost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseIPageKnowledgeDetailInfo>  => {
    const {
    pageNum,
    pageSize,
} = params;
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/page/${pageNum}/${pageSize}`;
    const p: any = {};
    ajax.check(params.pageNum, 'pageNum');
    ajax.check(params.pageSize, 'pageSize');
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 获取有返回知识列表
   
   
   * @param opt ajax config
   * @returns models.BaseResponseListKnowledgeInfo
   */
  public kmsZsbjServerApiKnowledgeReturnTypeListGet = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseListKnowledgeInfo>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/return-type-list`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 更新一条知识记录
   * @summary 更新一条知识信息
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeUpdatePut// 知识
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeUpdatePut = (
    
    data: ParamsBodykmsZsbjServerApiKnowledgeUpdatePut,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/update`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 查看知识内容
   * @param params ParamskmsZsbjServerApiKnowledgeViewGet
   
   * @param opt ajax config
   * @returns models.BaseResponseKnowledgeContentBo
   */
  public kmsZsbjServerApiKnowledgeViewGet = (
    params: ParamskmsZsbjServerApiKnowledgeViewGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseKnowledgeContentBo>  => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/view`;
    const p: any = {};
    p.query = {};
    if ('uuid' in params) p.query.uuid = params.uuid;
    ajax.check(params.uuid, 'uuid');
    if ('version' in params) p.query.version = params.version;
    ajax.check(params.version, 'version');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 对象任务评估
   * @param params ParamsobjectCommonTaskAssessObjectIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public objectCommonTaskAssessObjectIdGet = (
    params: ParamsobjectCommonTaskAssessObjectIdGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const {
    objectId,
} = params;
    const url = this.$basePath + `/objectCommonTask/assess/${objectId}`;
    const p: any = {};
    ajax.check(params.objectId, 'objectId');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 查看详情
   * @param params ParamsobjectCommonTaskDagObjectIdTaskIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponsestring
   */
  public objectCommonTaskDagObjectIdTaskIdGet = (
    params: ParamsobjectCommonTaskDagObjectIdTaskIdGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponsestring>  => {
    const {
    objectId,
    taskId,
} = params;
    const url = this.$basePath + `/objectCommonTask/dag/${objectId}/${taskId}`;
    const p: any = {};
    ajax.check(params.objectId, 'objectId');
    ajax.check(params.taskId, 'taskId');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 对象任务列表
   * @param params ParamsobjectCommonTaskObjectIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponseListObjectCommonTask
   */
  public objectCommonTaskObjectIdGet = (
    params: ParamsobjectCommonTaskObjectIdGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponseListObjectCommonTask>  => {
    const {
    objectId,
} = params;
    const url = this.$basePath + `/objectCommonTask/${objectId}`;
    const p: any = {};
    ajax.check(params.objectId, 'objectId');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 对象任务列表编辑
   * @param params ParamsobjectCommonTaskObjectIdPut
   * @param data: ParamsBodyobjectCommonTaskObjectIdPut
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public objectCommonTaskObjectIdPut = (
    params: ParamsobjectCommonTaskObjectIdPut,
    data: ParamsBodyobjectCommonTaskObjectIdPut,opt?: ExtraFetchParams
  ) : AjaxPromise<models.BaseResponse>  => {
    const {
    objectId,
} = params;
    const url = this.$basePath + `/objectCommonTask/${objectId}`;
    const p: any = {};
    ajax.check(params.objectId, 'objectId');
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
}

export default new DefaultApi();