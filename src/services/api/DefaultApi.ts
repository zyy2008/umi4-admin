/**
 * unknown
 * unknown
 *
 * OpenAPI spec version: last
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise, ExtraFetchParams } from "@ajax";
import * as models from "../model/models";

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

/**
 * @description baseServerDataQueryQuerySatBySidGet参数
 * @property `[satSid]` 卫星标识
 */
export interface ParamsbaseServerDataQueryQuerySatBySidGet {
  // queryParams
  /**
   * 卫星标识
   */
  satSid?: string;
}
/**
 * @description baseServerDataQueryQueryTmBySidGet参数
 * @property `[satSid]` 卫星标识
 */
export interface ParamsbaseServerDataQueryQueryTmBySidGet {
  // queryParams
  /**
   * 卫星标识
   */
  satId?: string;
}
/**
 * 算法表
 */
export type ParamsBodykmsJobServerAlgorithmAddPost = models.Algorithm2;
/**
 * @description kmsJobServerAlgorithmDeleteBatchDelete参数
 * @property `ids` ids
 */
export interface ParamskmsJobServerAlgorithmDeleteBatchDelete {
  // queryParams
  /**
   * ids
   */
  ids: string;
}
/**
 * raw paramter
 */
export type ParamsBodykmsJobServerAlgorithmDeleteBatchDelete = string;
/**
 * @description kmsJobServerAlgorithmDeleteDelete参数
 * @property `id` id
 */
export interface ParamskmsJobServerAlgorithmDeleteDelete {
  // queryParams
  /**
   * id
   */
  id: string;
}
/**
 * raw paramter
 */
export type ParamsBodykmsJobServerAlgorithmDeleteDelete = string;
/**
 * 算法表
 */
export type ParamsBodykmsJobServerAlgorithmEditPost = models.Algorithm3;
/**
 * @description kmsJobServerAlgorithmListPost参数
 * @property `[pageNum]` pageNum
 * @property `[pageSize]` pageSize
 */
export interface ParamskmsJobServerAlgorithmListPost {
  // queryParams
  /**
   * pageNum
   */
  pageNum?: string;
  /**
   * pageSize
   */
  pageSize?: string;
}
/**
 * 算法表
 */
export type ParamsBodykmsJobServerAlgorithmListPost = models.Algorithm;
/**
 * @description kmsJobServerAlgorithmQueryAuditLogByIdGet参数
 * @property `algoId` algoId
 * @property `[pageNum]` pageNum
 * @property `[pageSize]` pageSize
 */
export interface ParamskmsJobServerAlgorithmQueryAuditLogByIdGet {
  // queryParams
  /**
   * algoId
   */
  algoId: string;
  /**
   * pageNum
   */
  pageNum?: string;
  /**
   * pageSize
   */
  pageSize?: string;
}
/**
 * @description kmsJobServerAlgorithmQueryByIdGet参数
 * @property `id` id
 */
export interface ParamskmsJobServerAlgorithmQueryByIdGet {
  // queryParams
  /**
   * id
   */
  id: string;
}
/**
 * @description kmsJobServerAlgorithmQueryVersionByIdGet参数
 * @property `algoId` algoId
 * @property `[pageNum]` pageNum
 * @property `[pageSize]` pageSize
 */
export interface ParamskmsJobServerAlgorithmQueryVersionByIdGet {
  // queryParams
  /**
   * algoId
   */
  algoId: string;
  /**
   * pageNum
   */
  pageNum?: string;
  /**
   * pageSize
   */
  pageSize?: string;
}
/**
 * @description kmsJobServerCommonTaskAuditPageListTaskIdPageNumPageSizePost参数
 * @property `taskId` taskId
 * @property `pageNum` pageNum
 * @property `pageSize` pageSize
 */
export interface ParamskmsJobServerCommonTaskAuditPageListTaskIdPageNumPageSizePost {
  // pathParams
  /**
   * taskId
   */
  taskId: string;
  /**
   * pageNum
   */
  pageNum: string;
  /**
   * pageSize
   */
  pageSize: string;
}
/**
 */
export type ParamsBodykmsJobServerCommonTaskAuditPageListTaskIdPageNumPageSizePost =
  5;
/**
 * @description kmsJobServerCommonTaskFlowTaskIdPut参数
 * @property `taskId` taskId
 */
export interface ParamskmsJobServerCommonTaskFlowTaskIdPut {
  // pathParams
  /**
   * taskId
   */
  taskId: string;
}
/**
 * 公共任务
 */
export type ParamsBodykmsJobServerCommonTaskFlowTaskIdPut = models.CommonTask0;
/**
 * @description kmsJobServerCommonTaskHistoryPageListTaskIdPageNumPageSizePost参数
 * @property `taskId` taskId
 * @property `pageNum` pageNum
 * @property `pageSize` pageSize
 */
export interface ParamskmsJobServerCommonTaskHistoryPageListTaskIdPageNumPageSizePost {
  // pathParams
  /**
   * taskId
   */
  taskId: string;
  /**
   * pageNum
   */
  pageNum: string;
  /**
   * pageSize
   */
  pageSize: string;
}
/**
 */
export type ParamsBodykmsJobServerCommonTaskHistoryPageListTaskIdPageNumPageSizePost =
  3;
/**
 * @description kmsJobServerCommonTaskPageListPageNumPageSizePost参数
 * @property `pageNum` pageNum
 * @property `pageSize` pageSize
 */
export interface ParamskmsJobServerCommonTaskPageListPageNumPageSizePost {
  // pathParams
  /**
   * pageNum
   */
  pageNum: string;
  /**
   * pageSize
   */
  pageSize: string;
}
/**
 * 公共任务表
 */
export type ParamsBodykmsJobServerCommonTaskPageListPageNumPageSizePost =
  models.CommonTask1;
/**
 * 公共任务
 */
export type ParamsBodykmsJobServerCommonTaskPost = models.CommonTask01;
/**
 */
export type ParamsBodykmsJobServerCommonTaskPut = 4;
/**
 * @description kmsJobServerCommonTaskTaskIdDelete参数
 * @property `taskId` taskId
 */
export interface ParamskmsJobServerCommonTaskTaskIdDelete {
  // pathParams
  /**
   * taskId
   */
  taskId: string;
}
/**
 * raw paramter
 */
export type ParamsBodykmsJobServerCommonTaskTaskIdDelete = string;
/**
 * @description kmsJobServerCommonTaskTaskIdGet参数
 * @property `taskId` taskId
 */
export interface ParamskmsJobServerCommonTaskTaskIdGet {
  // pathParams
  /**
   * taskId
   */
  taskId: string;
}
/**
 * @description kmsJobServerObjectCommonTaskAssessObjectIdGet参数
 * @property `objectId` objectId
 */
export interface ParamskmsJobServerObjectCommonTaskAssessObjectIdGet {
  // pathParams
  /**
   * objectId
   */
  objectId: string;
}
/**
 * @description kmsJobServerObjectCommonTaskDagObjectIdTaskIdGet参数
 * @property `objectId` objectId
 * @property `taskId` taskId
 */
export interface ParamskmsJobServerObjectCommonTaskDagObjectIdTaskIdGet {
  // pathParams
  /**
   * objectId
   */
  objectId: string;
  /**
   * taskId
   */
  taskId: string;
}
/**
 * @description kmsJobServerObjectCommonTaskObjectIdGet参数
 * @property `objectId` objectId
 */
export interface ParamskmsJobServerObjectCommonTaskObjectIdGet {
  // pathParams
  /**
   * objectId
   */
  objectId: string;
}
/**
 * @description kmsJobServerObjectCommonTaskObjectIdPut参数
 * @property `objectId` objectId
 */
export interface ParamskmsJobServerObjectCommonTaskObjectIdPut {
  // pathParams
  /**
   * objectId
   */
  objectId: string;
}
/**
 */
export type ParamsBodykmsJobServerObjectCommonTaskObjectIdPut =
  Array<models.ObjectCommonTask>;
/**
 * @description kmsViewServerViewDeletePost参数
 * @property `[id]` 节点ID
 */
export interface ParamskmsViewServerViewDeletePost {
  // queryParams
  /**
   * 节点ID
   */
  id?: number;
}
/**
 * @description kmsViewServerViewEditorPost参数
 * @property `[id]` 节点ID
 * @property `[newName]` 新节点名
 */
export interface ParamskmsViewServerViewEditorPost {
  // queryParams
  /**
   * 节点ID
   */
  id?: string;
  /**
   * 新节点名
   */
  newName?: string;
}
/**
 * @description kmsViewServerViewExportPost参数
 * @property `[satelliteCode]` 卫星代号
 */
export interface ParamskmsViewServerViewExportPost {
  // queryParams
  /**
   * 卫星代号
   */
  satelliteCode?: string;
}
/**
 * @description kmsViewServerViewFindCodePost参数
 * @property `[satelliteCode]` 卫星代号
 */
export interface ParamskmsViewServerViewFindCodePost {
  // queryParams
  /**
   * 卫星代号
   */
  satelliteCode?: string;
}
/**
 * @description kmsViewServerViewFindNamePost参数
 * @property `[satelliteCode]` 卫星代号
 * @property `[system_or_parts]` 系统或器部件名
 */
export interface ParamskmsViewServerViewFindNamePost {
  // queryParams
  /**
   * 卫星代号
   */
  satelliteCode?: string;
  /**
   * 系统或器部件名
   */
  system_or_parts?: string;
}
/**
 * @property `[file]`
 */
export interface ParamskmsViewServerViewImportPost {
  // formParams
  file?: any;
}
/**
 * @description kmsViewServerViewNodeAddPost参数
 * @property `[newNodeName]` 新增节点名
 * @property `[nodeId]` 节点ID
 */
export interface ParamskmsViewServerViewNodeAddPost {
  // queryParams
  /**
   * 新增节点名
   */
  newNodeName?: string;
  /**
   * 节点ID
   */
  nodeId?: number;
}
/**
 */
export type ParamsBodykmsViewServerViewYcImportPost = models.ParameterInPo;
/**
 * 知识
 */
export type ParamsBodykmsZsbjServerApiKnowledgeAddPost = models.Knowledge;
/**
 * @description kmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost参数
 * @property `pageNum` pageNum
 * @property `pageSize` pageSize
 */
export interface ParamskmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost {
  // pathParams
  /**
   * pageNum
   */
  pageNum: string;
  /**
   * pageSize
   */
  pageSize: string;
}
/**
 */
export type ParamsBodykmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost =
  models.BaseQo;
/**
 * 知识批量编辑
 */
export type ParamsBodykmsZsbjServerApiKnowledgeBatchEditPut =
  models.KnowledgeBatchEditDto;
/**
 */
export type ParamsBodykmsZsbjServerApiKnowledgeCheckBatchPost = models.MultiQo3;
/**
 */
export type ParamsBodykmsZsbjServerApiKnowledgeCheckPost = models.CheckQo;
/**
 * 转换多条知识
 */
export type ParamsBodykmsZsbjServerApiKnowledgeConvertMultiPost =
  models.ConvertMultiDto;
/**
 * 转换知识
 */
export type ParamsBodykmsZsbjServerApiKnowledgeConvertPost =
  models.ConvertKnowledgeDto;
/**
 */
export type ParamsBodykmsZsbjServerApiKnowledgeDeleteDelete = models.MultiQo1;
/**
 * @description kmsZsbjServerApiKnowledgeDownloadGet参数
 * @property `uuid` 待下载的知识标识uuid
 * @property `version` 待下载的知识版本号
 */
export interface ParamskmsZsbjServerApiKnowledgeDownloadGet {
  // queryParams
  /**
   * 待下载的知识标识uuid
   */
  uuid: string;
  /**
   * 待下载的知识版本号
   */
  version: string;
}
/**
 */
export type ParamsBodykmsZsbjServerApiKnowledgeDownloadMultiPost =
  models.MultiQo;
/**
 * @description kmsZsbjServerApiKnowledgeExistsGet参数
 * @property `ruleName` 知识名称
 */
export interface ParamskmsZsbjServerApiKnowledgeExistsGet {
  // queryParams
  /**
   * 知识名称
   */
  ruleName: string;
}
/**
 */
export type ParamsBodykmsZsbjServerApiKnowledgeExportPost = models.ExportQo;
/**
 * @description kmsZsbjServerApiKnowledgeHistoryGet参数
 * @property `uuid` 知识标识uuid
 */
export interface ParamskmsZsbjServerApiKnowledgeHistoryGet {
  // queryParams
  /**
   * 知识标识uuid
   */
  uuid: string;
}
/**
 * @description kmsZsbjServerApiKnowledgeImportPost参数
 * @property `targetCode` 导入对象代号
 * @property `[file]`
 */
export interface ParamskmsZsbjServerApiKnowledgeImportPost {
  // queryParams
  /**
   * 导入对象代号
   */
  targetCode: string;
  // formParams
  file?: any;
}
/**
 */
export type ParamsBodykmsZsbjServerApiKnowledgeLoadingAllPost = models.MultiQo2;
/**
 * @description kmsZsbjServerApiKnowledgeLoadingPost参数
 * @property `uuid` 待加载的知识标识uuid
 * @property `version` 待加载的知识版本号
 */
export interface ParamskmsZsbjServerApiKnowledgeLoadingPost {
  // queryParams
  /**
   * 待加载的知识标识uuid
   */
  uuid: string;
  /**
   * 待加载的知识版本号
   */
  version: string;
}
/**
 * @description kmsZsbjServerApiKnowledgePagePageNumPageSizePost参数
 * @property `pageNum` pageNum
 * @property `pageSize` pageSize
 */
export interface ParamskmsZsbjServerApiKnowledgePagePageNumPageSizePost {
  // pathParams
  /**
   * pageNum
   */
  pageNum: string;
  /**
   * pageSize
   */
  pageSize: string;
}
/**
 * 知识信息表
 */
export type ParamsBodykmsZsbjServerApiKnowledgePagePageNumPageSizePost =
  models.KnowledgeInfo;
/**
 * 知识
 */
export type ParamsBodykmsZsbjServerApiKnowledgeUpdatePut = models.Knowledge1;
/**
 * @description kmsZsbjServerApiKnowledgeViewGet参数
 * @property `uuid` 待查看的知识标识uuid
 * @property `version` 待查看的知识版本号
 */
export interface ParamskmsZsbjServerApiKnowledgeViewGet {
  // queryParams
  /**
   * 待查看的知识标识uuid
   */
  uuid: string;
  /**
   * 待查看的知识版本号
   */
  version: string;
}

export class DefaultApi {
  protected $basePath = "".replace(/\/$/, "");

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath.replace(/\/$/, "");
    }
  }

  /**
   * 
   * @summary 对象组列表查询
   
   
   * @param opt ajax config
   * @returns models.BaseResponseListObjectGroupBean
   */
  public baseServerDataQueryQueryObjectGroupListGet = (
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseListObjectGroupBean> => {
    const url = this.$basePath + `/base-server/DataQuery/queryObjectGroupList`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 根据卫星标识查询卫星信息
   * @param params ParamsbaseServerDataQueryQuerySatBySidGet
   
   * @param opt ajax config
   * @returns models.BaseResponseSatBean
   */
  public baseServerDataQueryQuerySatBySidGet = (
    params: ParamsbaseServerDataQueryQuerySatBySidGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseSatBean> => {
    const url = this.$basePath + `/base-server/DataQuery/querySatBySid`;
    const p: any = {};
    p.query = {};
    if ("satSid" in params) p.query.satSid = params.satSid;
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 卫星列表查询
   
   
   * @param opt ajax config
   * @returns models.BaseResponseListSatBean
   */
  public baseServerDataQueryQuerySatListGet = (
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseListSatBean> => {
    const url = this.$basePath + `/base-server/DataQuery/querySatList`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 系统标识列表查询
   
   
   * @param opt ajax config
   * @returns models.BaseResponseListSystemCodeBean
   */
  public baseServerDataQueryQuerySystemCodeListGet = (
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseListSystemCodeBean> => {
    const url = this.$basePath + `/base-server/DataQuery/querySystemCodeList`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 根据卫星标识查询参数信息
   * @param params ParamsbaseServerDataQueryQueryTmBySidGet
   
   * @param opt ajax config
   * @returns models.BaseResponseListParamBean
   */
  public baseServerDataQueryQueryTmBySidGet = (
    params: ParamsbaseServerDataQueryQueryTmBySidGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseListParamBean> => {
    const url = this.$basePath + `/kmsSysconfigServer/DataQuery/queryTmBySid`;
    const p: any = {};
    p.query = {};
    if ("satId" in params) p.query.satId = params.satId;
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 算法任务-新增
   * @summary 算法任务-新增
   
   * @param data: ParamsBodykmsJobServerAlgorithmAddPost// 算法表
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerAlgorithmAddPost = (
    data: ParamsBodykmsJobServerAlgorithmAddPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-job-server/algorithm/add`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 算法任务-批量删除
   * @summary 算法任务-批量删除
   * @param params ParamskmsJobServerAlgorithmDeleteBatchDelete
   * @param data: ParamsBodykmsJobServerAlgorithmDeleteBatchDelete// raw paramter
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerAlgorithmDeleteBatchDelete = (
    params: ParamskmsJobServerAlgorithmDeleteBatchDelete,
    data: ParamsBodykmsJobServerAlgorithmDeleteBatchDelete,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-job-server/algorithm/deleteBatch`;
    const p: any = {};
    p.query = {};
    if ("ids" in params) p.query.ids = params.ids;
    ajax.check(params.ids, "ids");
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "DELETE",
      url,
      ...p,
    });
  };
  /**
   * upd配置-通过id删除
   * @summary 算法任务-通过id删除
   * @param params ParamskmsJobServerAlgorithmDeleteDelete
   * @param data: ParamsBodykmsJobServerAlgorithmDeleteDelete// raw paramter
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerAlgorithmDeleteDelete = (
    params: ParamskmsJobServerAlgorithmDeleteDelete,
    data: ParamsBodykmsJobServerAlgorithmDeleteDelete,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-job-server/algorithm/delete`;
    const p: any = {};
    p.query = {};
    if ("id" in params) p.query.id = params.id;
    ajax.check(params.id, "id");
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "DELETE",
      url,
      ...p,
    });
  };
  /**
   * 算法任务-编辑
   * @summary 算法任务-编辑
   
   * @param data: ParamsBodykmsJobServerAlgorithmEditPost// 算法表
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerAlgorithmEditPost = (
    data: ParamsBodykmsJobServerAlgorithmEditPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-job-server/algorithm/edit`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 算法任务-导出
   * @summary 算法任务-导出
   
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerAlgorithmExportPost = (
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-job-server/algorithm/export`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 算法任务-导入
   * @summary 算法任务-导入
   
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerAlgorithmImportPost = (
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-job-server/algorithm/import`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 算法任务-列表
   * @summary 算法任务-列表
   * @param params ParamskmsJobServerAlgorithmListPost
   * @param data: ParamsBodykmsJobServerAlgorithmListPost// 算法表
   * @param opt ajax config
   * @returns models.BaseResponseIPageAlgorithm
   */
  public kmsJobServerAlgorithmListPost = (
    params: ParamskmsJobServerAlgorithmListPost,
    data: ParamsBodykmsJobServerAlgorithmListPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseIPageAlgorithm> => {
    const url = this.$basePath + `/kms-job-server/algorithm/list`;
    const p: any = {};
    p.query = {};
    if ("pageNum" in params) p.query.pageNum = params.pageNum;
    if ("pageSize" in params) p.query.pageSize = params.pageSize;
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 算法任务-通过算法id查询审计日志
   * @summary 算法任务-通过算法id查询审计日志
   * @param params ParamskmsJobServerAlgorithmQueryAuditLogByIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerAlgorithmQueryAuditLogByIdGet = (
    params: ParamskmsJobServerAlgorithmQueryAuditLogByIdGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-job-server/algorithm/queryAuditLogById`;
    const p: any = {};
    p.query = {};
    if ("algoId" in params) p.query.algoId = params.algoId;
    ajax.check(params.algoId, "algoId");
    if ("pageNum" in params) p.query.pageNum = params.pageNum;
    if ("pageSize" in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 算法任务-通过id查询
   * @summary 算法任务-通过id查询
   * @param params ParamskmsJobServerAlgorithmQueryByIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerAlgorithmQueryByIdGet = (
    params: ParamskmsJobServerAlgorithmQueryByIdGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-job-server/algorithm/queryById`;
    const p: any = {};
    p.query = {};
    if ("id" in params) p.query.id = params.id;
    ajax.check(params.id, "id");
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 算法任务-通过算法id查询历史
   * @summary 算法任务-通过算法id查询历史
   * @param params ParamskmsJobServerAlgorithmQueryVersionByIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerAlgorithmQueryVersionByIdGet = (
    params: ParamskmsJobServerAlgorithmQueryVersionByIdGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-job-server/algorithm/queryVersionById`;
    const p: any = {};
    p.query = {};
    if ("algoId" in params) p.query.algoId = params.algoId;
    ajax.check(params.algoId, "algoId");
    if ("pageNum" in params) p.query.pageNum = params.pageNum;
    if ("pageSize" in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   *
   * @summary 操作日志
   * @param params ParamskmsJobServerCommonTaskAuditPageListTaskIdPageNumPageSizePost
   * @param data: ParamsBodykmsJobServerCommonTaskAuditPageListTaskIdPageNumPageSizePost
   * @param opt ajax config
   * @returns models.BaseResponseIPageCommonTaskAuditLog
   */
  public kmsJobServerCommonTaskAuditPageListTaskIdPageNumPageSizePost = (
    params: ParamskmsJobServerCommonTaskAuditPageListTaskIdPageNumPageSizePost,
    data: ParamsBodykmsJobServerCommonTaskAuditPageListTaskIdPageNumPageSizePost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseIPageCommonTaskAuditLog> => {
    const { taskId, pageNum, pageSize } = params;
    const url =
      this.$basePath +
      `/kms-job-server/commonTask/audit/pageList/${taskId}/${pageNum}/${pageSize}`;
    const p: any = {};
    ajax.check(params.taskId, "taskId");
    ajax.check(params.pageNum, "pageNum");
    ajax.check(params.pageSize, "pageSize");
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   *
   * @summary 任务流程编辑
   * @param params ParamskmsJobServerCommonTaskFlowTaskIdPut
   * @param data: ParamsBodykmsJobServerCommonTaskFlowTaskIdPut// 公共任务
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerCommonTaskFlowTaskIdPut = (
    params: ParamskmsJobServerCommonTaskFlowTaskIdPut,
    data: ParamsBodykmsJobServerCommonTaskFlowTaskIdPut,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const { taskId } = params;
    const url = this.$basePath + `/kms-job-server/commonTask/flow/${taskId}`;
    const p: any = {};
    ajax.check(params.taskId, "taskId");
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "PUT",
      url,
      ...p,
    });
  };
  /**
   *
   * @summary 历史
   * @param params ParamskmsJobServerCommonTaskHistoryPageListTaskIdPageNumPageSizePost
   * @param data: ParamsBodykmsJobServerCommonTaskHistoryPageListTaskIdPageNumPageSizePost
   * @param opt ajax config
   * @returns models.BaseResponseIPageCommonTaskVersion
   */
  public kmsJobServerCommonTaskHistoryPageListTaskIdPageNumPageSizePost = (
    params: ParamskmsJobServerCommonTaskHistoryPageListTaskIdPageNumPageSizePost,
    data: ParamsBodykmsJobServerCommonTaskHistoryPageListTaskIdPageNumPageSizePost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseIPageCommonTaskVersion> => {
    const { taskId, pageNum, pageSize } = params;
    const url =
      this.$basePath +
      `/kms-job-server/commonTask/history/pageList/${taskId}/${pageNum}/${pageSize}`;
    const p: any = {};
    ajax.check(params.taskId, "taskId");
    ajax.check(params.pageNum, "pageNum");
    ajax.check(params.pageSize, "pageSize");
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   *
   * @summary 列表查询
   * @param params ParamskmsJobServerCommonTaskPageListPageNumPageSizePost
   * @param data: ParamsBodykmsJobServerCommonTaskPageListPageNumPageSizePost// 公共任务表
   * @param opt ajax config
   * @returns models.BaseResponseIPageCommonTask
   */
  public kmsJobServerCommonTaskPageListPageNumPageSizePost = (
    params: ParamskmsJobServerCommonTaskPageListPageNumPageSizePost,
    data: ParamsBodykmsJobServerCommonTaskPageListPageNumPageSizePost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseIPageCommonTask> => {
    const { pageNum, pageSize } = params;
    const url =
      this.$basePath +
      `/kms-job-server/commonTask/pageList/${pageNum}/${pageSize}`;
    const p: any = {};
    ajax.check(params.pageNum, "pageNum");
    ajax.check(params.pageSize, "pageSize");
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 新建
   
   * @param data: ParamsBodykmsJobServerCommonTaskPost// 公共任务
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerCommonTaskPost = (
    data: ParamsBodykmsJobServerCommonTaskPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-job-server/commonTask`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 批量编辑
   
   * @param data: ParamsBodykmsJobServerCommonTaskPut
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerCommonTaskPut = (
    data: ParamsBodykmsJobServerCommonTaskPut,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-job-server/commonTask`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "PUT",
      url,
      ...p,
    });
  };
  /**
   *
   * @summary 删除
   * @param params ParamskmsJobServerCommonTaskTaskIdDelete
   * @param data: ParamsBodykmsJobServerCommonTaskTaskIdDelete// raw paramter
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerCommonTaskTaskIdDelete = (
    params: ParamskmsJobServerCommonTaskTaskIdDelete,
    data: ParamsBodykmsJobServerCommonTaskTaskIdDelete,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const { taskId } = params;
    const url = this.$basePath + `/kms-job-server/commonTask/${taskId}`;
    const p: any = {};
    ajax.check(params.taskId, "taskId");
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "DELETE",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 查看
   * @param params ParamskmsJobServerCommonTaskTaskIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponseCommonTask
   */
  public kmsJobServerCommonTaskTaskIdGet = (
    params: ParamskmsJobServerCommonTaskTaskIdGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseCommonTask> => {
    const { taskId } = params;
    const url = this.$basePath + `/kms-job-server/commonTask/${taskId}`;
    const p: any = {};
    ajax.check(params.taskId, "taskId");
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 告警、对象、任务数统计
   
   
   * @param opt ajax config
   * @returns models.BaseResponse4
   */
  public kmsJobServerDashboardIndexCountGet = (
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse4> => {
    const url = this.$basePath + `/kms-job-server/dashboard/indexCount`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 对象任务评估
   * @param params ParamskmsJobServerObjectCommonTaskAssessObjectIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerObjectCommonTaskAssessObjectIdGet = (
    params: ParamskmsJobServerObjectCommonTaskAssessObjectIdGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const { objectId } = params;
    const url =
      this.$basePath + `/kms-job-server/objectCommonTask/assess/${objectId}`;
    const p: any = {};
    ajax.check(params.objectId, "objectId");
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 查看详情
   * @param params ParamskmsJobServerObjectCommonTaskDagObjectIdTaskIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponsestring
   */
  public kmsJobServerObjectCommonTaskDagObjectIdTaskIdGet = (
    params: ParamskmsJobServerObjectCommonTaskDagObjectIdTaskIdGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponsestring> => {
    const { objectId, taskId } = params;
    const url =
      this.$basePath +
      `/kms-job-server/objectCommonTask/dag/${objectId}/${taskId}`;
    const p: any = {};
    ajax.check(params.objectId, "objectId");
    ajax.check(params.taskId, "taskId");
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 对象任务列表
   * @param params ParamskmsJobServerObjectCommonTaskObjectIdGet
   
   * @param opt ajax config
   * @returns models.BaseResponseListObjectCommonTask
   */
  public kmsJobServerObjectCommonTaskObjectIdGet = (
    params: ParamskmsJobServerObjectCommonTaskObjectIdGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseListObjectCommonTask> => {
    const { objectId } = params;
    const url = this.$basePath + `/kms-job-server/objectCommonTask/${objectId}`;
    const p: any = {};
    ajax.check(params.objectId, "objectId");
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   *
   * @summary 对象任务列表编辑
   * @param params ParamskmsJobServerObjectCommonTaskObjectIdPut
   * @param data: ParamsBodykmsJobServerObjectCommonTaskObjectIdPut
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsJobServerObjectCommonTaskObjectIdPut = (
    params: ParamskmsJobServerObjectCommonTaskObjectIdPut,
    data: ParamsBodykmsJobServerObjectCommonTaskObjectIdPut,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const { objectId } = params;
    const url = this.$basePath + `/kms-job-server/objectCommonTask/${objectId}`;
    const p: any = {};
    ajax.check(params.objectId, "objectId");
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "PUT",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 根据ID删除
   * @param params ParamskmsViewServerViewDeletePost
   
   * @param opt ajax config
   * @returns models.BaseResponsestring1
   */
  public kmsViewServerViewDeletePost = (
    params: ParamskmsViewServerViewDeletePost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponsestring1> => {
    const url = this.$basePath + `/kms-view-server/view/delete`;
    const p: any = {};
    p.query = {};
    if ("id" in params) p.query.id = params.id;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 图谱节点编辑
   * @param params ParamskmsViewServerViewEditorPost
   
   * @param opt ajax config
   * @returns models.BaseResponsestring1
   */
  public kmsViewServerViewEditorPost = (
    params: ParamskmsViewServerViewEditorPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponsestring1> => {
    const url = this.$basePath + `/kms-view-server/view/editor`;
    const p: any = {};
    p.query = {};
    if ("id" in params) p.query.id = params.id;
    if ("newName" in params) p.query.newName = params.newName;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 导出知识图谱
   * @param params ParamskmsViewServerViewExportPost
   
   * @param opt ajax config
   * @returns models.BaseResponsestring1
   */
  public kmsViewServerViewExportPost = (
    params: ParamskmsViewServerViewExportPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponsestring1> => {
    const url = this.$basePath + `/kms-view-server/view/export`;
    const p: any = {};
    p.query = {};
    if ("satelliteCode" in params) p.query.satelliteCode = params.satelliteCode;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 根据代号查询图谱
   * @param params ParamskmsViewServerViewFindCodePost
   
   * @param opt ajax config
   * @returns models.BaseResponseListViewRelationship
   */
  public kmsViewServerViewFindCodePost = (
    params: ParamskmsViewServerViewFindCodePost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseListViewRelationship> => {
    const url = this.$basePath + `/kms-view-server/view/find/code`;
    const p: any = {};
    p.query = {};
    if ("satelliteCode" in params) p.query.satelliteCode = params.satelliteCode;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 多条件查询
   * @param params ParamskmsViewServerViewFindNamePost
   
   * @param opt ajax config
   * @returns models.BaseResponseListViewRelationship
   */
  public kmsViewServerViewFindNamePost = (
    params: ParamskmsViewServerViewFindNamePost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseListViewRelationship> => {
    const url = this.$basePath + `/kms-view-server/view/find/name`;
    const p: any = {};
    p.query = {};
    if ("satelliteCode" in params) p.query.satelliteCode = params.satelliteCode;
    if ("system_or_parts" in params)
      p.query.system_or_parts = params.system_or_parts;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 导入知识图谱
   * @param params ParamskmsViewServerViewImportPost
   
   * @param opt ajax config
   * @returns models.BaseResponseListViewRelationship
   */
  public kmsViewServerViewImportPost = (
    params: ParamskmsViewServerViewImportPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseListViewRelationship> => {
    const url = this.$basePath + `/kms-view-server/view/import`;
    const p: any = {};
    p.form = new FormData();
    // 上传文件
    opt = {
      ...opt,
      headers: {
        ...(opt && opt.headers),
        "Content-Type": "multipart/form-data",
      },
    };
    // p.form = new FormData();
    if ("file" in params) p.form.append("file", params.file);
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 图谱节点增加
   * @param params ParamskmsViewServerViewNodeAddPost
   
   * @param opt ajax config
   * @returns models.BaseResponsestring1
   */
  public kmsViewServerViewNodeAddPost = (
    params: ParamskmsViewServerViewNodeAddPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponsestring1> => {
    const url = this.$basePath + `/kms-view-server/view/node/add`;
    const p: any = {};
    p.query = {};
    if ("newNodeName" in params) p.query.newNodeName = params.newNodeName;
    if ("nodeId" in params) p.query.nodeId = params.nodeId;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 遥测参数导入
   
   * @param data: ParamsBodykmsViewServerViewYcImportPost
   * @param opt ajax config
   * @returns models.BaseResponseParameterOutPo
   */
  public kmsViewServerViewYcImportPost = (
    data: ParamsBodykmsViewServerViewYcImportPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseParameterOutPo> => {
    const url = this.$basePath + `/kms-view-server/view/yc/import`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 新增一条知识信息
   * @summary 新增知识
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeAddPost// 知识
   * @param opt ajax config
   * @returns models.BaseResponseKnowledgeVersion
   */
  public kmsZsbjServerApiKnowledgeAddPost = (
    data: ParamsBodykmsZsbjServerApiKnowledgeAddPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseKnowledgeVersion> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/add`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   *
   * @summary 获取审计日志列表
   * @param params ParamskmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost
   * @param opt ajax config
   * @returns models.BaseResponseIPageKnowledgeAuditLog
   */
  public kmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost = (
    params: ParamskmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost,
    data: ParamsBodykmsZsbjServerApiKnowledgeAuditPagePageNumPageSizePost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseIPageKnowledgeAuditLog> => {
    const { pageNum, pageSize } = params;
    const url =
      this.$basePath +
      `/kms-zsbj-server/api/knowledge/audit/page/${pageNum}/${pageSize}`;
    const p: any = {};
    ajax.check(params.pageNum, "pageNum");
    ajax.check(params.pageSize, "pageSize");
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 更新多条知识信息
   * @summary 更新多条知识信息
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeBatchEditPut// 知识批量编辑
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeBatchEditPut = (
    data: ParamsBodykmsZsbjServerApiKnowledgeBatchEditPut,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/batch-edit`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "PUT",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 多条知识校验
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeCheckBatchPost
   * @param opt ajax config
   * @returns models.BaseResponse1
   */
  public kmsZsbjServerApiKnowledgeCheckBatchPost = (
    data: ParamsBodykmsZsbjServerApiKnowledgeCheckBatchPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse1> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/check-batch`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 知识校验
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeCheckPost
   * @param opt ajax config
   * @returns models.BaseResponse3
   */
  public kmsZsbjServerApiKnowledgeCheckPost = (
    data: ParamsBodykmsZsbjServerApiKnowledgeCheckPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse3> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/check`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 多条知识转换
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeConvertMultiPost// 转换多条知识
   * @param opt ajax config
   * @returns models.BaseResponse2
   */
  public kmsZsbjServerApiKnowledgeConvertMultiPost = (
    data: ParamsBodykmsZsbjServerApiKnowledgeConvertMultiPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse2> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/convert-multi`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 单条知识转换
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeConvertPost// 转换知识
   * @param opt ajax config
   * @returns models.BaseResponseKnowledgeContentBo
   */
  public kmsZsbjServerApiKnowledgeConvertPost = (
    data: ParamsBodykmsZsbjServerApiKnowledgeConvertPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseKnowledgeContentBo> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/convert`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 删除多条知识记录
   * @summary 删除知识记录
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeDeleteDelete
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeDeleteDelete = (
    data: ParamsBodykmsZsbjServerApiKnowledgeDeleteDelete,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/delete`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "DELETE",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 下载知识文件
   * @param params ParamskmsZsbjServerApiKnowledgeDownloadGet
   
   * @param opt ajax config
   * @returns string
   */
  public kmsZsbjServerApiKnowledgeDownloadGet = (
    params: ParamskmsZsbjServerApiKnowledgeDownloadGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<string> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/download`;
    const p: any = {};
    p.query = {};
    if ("uuid" in params) p.query.uuid = params.uuid;
    ajax.check(params.uuid, "uuid");
    if ("version" in params) p.query.version = params.version;
    ajax.check(params.version, "version");
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 下载多个知识文件
   * @summary 下载多个知识文件
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeDownloadMultiPost
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeDownloadMultiPost = (
    data: ParamsBodykmsZsbjServerApiKnowledgeDownloadMultiPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url =
      this.$basePath + `/kms-zsbj-server/api/knowledge/download-multi`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 根据名称查询知识是否存在
   * @param params ParamskmsZsbjServerApiKnowledgeExistsGet
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeExistsGet = (
    params: ParamskmsZsbjServerApiKnowledgeExistsGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/exists`;
    const p: any = {};
    p.query = {};
    if ("ruleName" in params) p.query.ruleName = params.ruleName;
    ajax.check(params.ruleName, "ruleName");
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 导出知识列表及文件
   * @summary 导出知识列表
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeExportPost
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeExportPost = (
    data: ParamsBodykmsZsbjServerApiKnowledgeExportPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/export`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 获取指定知识历史版本列表
   * @param params ParamskmsZsbjServerApiKnowledgeHistoryGet
   
   * @param opt ajax config
   * @returns models.BaseResponseListKnowledgeVersion
   */
  public kmsZsbjServerApiKnowledgeHistoryGet = (
    params: ParamskmsZsbjServerApiKnowledgeHistoryGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseListKnowledgeVersion> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/history`;
    const p: any = {};
    p.query = {};
    if ("uuid" in params) p.query.uuid = params.uuid;
    ajax.check(params.uuid, "uuid");
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 导入知识列表
   * @param params ParamskmsZsbjServerApiKnowledgeImportPost
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeImportPost = (
    params: ParamskmsZsbjServerApiKnowledgeImportPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/import`;
    const p: any = {};
    p.query = {};
    if ("targetCode" in params) p.query.targetCode = params.targetCode;
    ajax.check(params.targetCode, "targetCode");
    p.form = new FormData();
    // 上传文件
    opt = {
      ...opt,
      headers: {
        ...(opt && opt.headers),
        "Content-Type": "multipart/form-data",
      },
    };
    // p.form = new FormData();
    if ("file" in params) p.form.append("file", params.file);
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 加载所有
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeLoadingAllPost
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeLoadingAllPost = (
    data: ParamsBodykmsZsbjServerApiKnowledgeLoadingAllPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/loading-all`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 在线加载
   * @param params ParamskmsZsbjServerApiKnowledgeLoadingPost
   
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeLoadingPost = (
    params: ParamskmsZsbjServerApiKnowledgeLoadingPost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/loading`;
    const p: any = {};
    p.query = {};
    if ("uuid" in params) p.query.uuid = params.uuid;
    ajax.check(params.uuid, "uuid");
    if ("version" in params) p.query.version = params.version;
    ajax.check(params.version, "version");
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   *
   * @summary 获取指定页知识列表
   * @param params ParamskmsZsbjServerApiKnowledgePagePageNumPageSizePost
   * @param data: ParamsBodykmsZsbjServerApiKnowledgePagePageNumPageSizePost// 知识信息表
   * @param opt ajax config
   * @returns models.BaseResponseIPageKnowledgeDetailInfo
   */
  public kmsZsbjServerApiKnowledgePagePageNumPageSizePost = (
    params: ParamskmsZsbjServerApiKnowledgePagePageNumPageSizePost,
    data: ParamsBodykmsZsbjServerApiKnowledgePagePageNumPageSizePost,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseIPageKnowledgeDetailInfo> => {
    const { pageNum, pageSize } = params;
    const url =
      this.$basePath +
      `/kms-zsbj-server/api/knowledge/page/${pageNum}/${pageSize}`;
    const p: any = {};
    ajax.check(params.pageNum, "pageNum");
    ajax.check(params.pageSize, "pageSize");
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "POST",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 获取有返回知识列表
   
   
   * @param opt ajax config
   * @returns models.BaseResponseListKnowledgeInfo
   */
  public kmsZsbjServerApiKnowledgeReturnTypeListGet = (
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseListKnowledgeInfo> => {
    const url =
      this.$basePath + `/kms-zsbj-server/api/knowledge/return-type-list`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
  /**
   * 更新一条知识记录
   * @summary 更新一条知识信息
   
   * @param data: ParamsBodykmsZsbjServerApiKnowledgeUpdatePut// 知识
   * @param opt ajax config
   * @returns models.BaseResponse
   */
  public kmsZsbjServerApiKnowledgeUpdatePut = (
    data: ParamsBodykmsZsbjServerApiKnowledgeUpdatePut,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponse> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/update`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: "PUT",
      url,
      ...p,
    });
  };
  /**
   * 
   * @summary 查看知识内容
   * @param params ParamskmsZsbjServerApiKnowledgeViewGet
   
   * @param opt ajax config
   * @returns models.BaseResponseKnowledgeContentBo
   */
  public kmsZsbjServerApiKnowledgeViewGet = (
    params: ParamskmsZsbjServerApiKnowledgeViewGet,
    opt?: ExtraFetchParams
  ): AjaxPromise<models.BaseResponseKnowledgeContentBo> => {
    const url = this.$basePath + `/kms-zsbj-server/api/knowledge/view`;
    const p: any = {};
    p.query = {};
    if ("uuid" in params) p.query.uuid = params.uuid;
    ajax.check(params.uuid, "uuid");
    if ("version" in params) p.query.version = params.version;
    ajax.check(params.version, "version");
    return ajax.ajax({
      ...opt,
      method: "GET",
      url,
      ...p,
    });
  };
}

export default new DefaultApi();
